
import streamlit as st
import json
import pandas as pd
import altair as alt
from datetime import datetime
import os
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch

# --- ReportLab PDF Generator ---
def generate_pdf_with_reportlab(business_name, total_score, risk_label, category_scores, recommendations, output_path):
    c = canvas.Canvas(output_path, pagesize=A4)
    width, height = A4
    x_margin = 1 * inch
    y = height - 1.2 * inch

    c.setFont("Helvetica-Bold", 18)
    c.drawString(x_margin, y, "RiskLens SME Report")
    y -= 0.4 * inch

    c.setFont("Helvetica", 12)
    c.drawString(x_margin, y, f"Business Name: {business_name}")
    y -= 0.25 * inch
    c.drawString(x_margin, y, f"Date: {datetime.now().strftime('%Y-%m-%d')}")
    y -= 0.4 * inch

    c.setFont("Helvetica-Bold", 14)
    c.drawString(x_margin, y, "Risk Summary")
    y -= 0.3 * inch
    c.setFont("Helvetica", 12)
    c.drawString(x_margin, y, f"Overall Risk Score: {total_score} / 100")
    y -= 0.25 * inch
    c.drawString(x_margin, y, f"Risk Category: {risk_label}")
    y -= 0.4 * inch

    c.setFont("Helvetica-Bold", 14)
    c.drawString(x_margin, y, "Category Breakdown")
    y -= 0.3 * inch
    c.setFont("Helvetica", 12)
    for category, score in category_scores.items():
        c.drawString(x_margin, y, f"- {category}: {score}")
        y -= 0.2 * inch
        if y < 1.5 * inch:
            c.showPage()
            y = height - 1.2 * inch

    y -= 0.3 * inch
    c.setFont("Helvetica-Bold", 14)
    c.drawString(x_margin, y, "Recommendations")
    y -= 0.3 * inch
    c.setFont("Helvetica", 12)
    for rec in recommendations:
        c.drawString(x_margin, y, f"- {rec}")
        y -= 0.2 * inch
        if y < 1.5 * inch:
            c.showPage()
            y = height - 1.2 * inch

    c.setFont("Helvetica-Oblique", 10)
    c.drawString(x_margin, 0.75 * inch, "Generated by RiskLens SME â€“ A smarter lens on SME resilience.")
    c.save()

# --- Load question structure ---
with open("questions.json", "r") as f:
    questions_structure = json.load(f)

# --- Risk score logic ---
def compute_risk_score(responses, questions_structure):
    category_scores = {}
    total_score = 0.0

    for category, details in questions_structure.items():
        weight = details['weight']
        category_questions = details['questions']
        scores = responses.get(category, [])

        if not scores or len(scores) != len(category_questions):
            raise ValueError(f"Incomplete responses for: {category}")

        category_avg = sum(scores) / len(scores)
        weighted_score = category_avg * weight * 20
        category_scores[category] = round(weighted_score, 2)
        total_score += weighted_score

    if total_score >= 70:
        risk_label = "Low Risk"
    elif total_score >= 40:
        risk_label = "Medium Risk"
    else:
        risk_label = "High Risk"

    return round(total_score, 2), risk_label, category_scores

# --- Generate recommendations ---
def generate_recommendations(category_scores):
    recommendations = []
    for category, score in category_scores.items():
        if category == "Financial Risk":
            if score < 15:
                recommendations.append("Improve your cash flow tracking and build a buffer to cover at least 3 months of expenses.")
            elif score < 20:
                recommendations.append("Explore more reliable credit sources and improve recordkeeping for loans.")
        elif category == "Operational Risk":
            if score < 12:
                recommendations.append("Diversify suppliers and develop backup staffing plans to reduce operational disruption.")
            elif score < 15:
                recommendations.append("Document standard operating procedures and train cross-functional staff.")
        elif category == "Market Risk":
            if score < 12:
                recommendations.append("Reduce reliance on one or two major customers and track market trends regularly.")
            elif score < 15:
                recommendations.append("Consider adjusting pricing or product offerings based on recent customer behavior.")
        elif category == "Systemic Risk Exposure":
            if score < 12:
                recommendations.append("Reduce reliance on imported inputs and explore local sourcing options.")
            elif score < 15:
                recommendations.append("Prepare for inflation and currency risks with flexible pricing or bulk purchasing strategies.")
        elif category == "Technology Readiness":
            if score < 8:
                recommendations.append("Start using digital tools like spreadsheets or mobile money for financial tracking.")
            elif score < 10:
                recommendations.append("Expand digital engagement through WhatsApp, social media, or e-commerce platforms.")
    return recommendations

# --- Streamlit UI ---
st.set_page_config(page_title="RiskLens SME", layout="centered")

st.image("logo.png", width=150)
st.markdown("<h1 style='color:#2E86C1;'>RiskLens SME</h1>", unsafe_allow_html=True)
st.markdown("### <span style='color:#F5B041;'>A smarter lens on SME resilience</span>", unsafe_allow_html=True)

business_name = st.text_input("Enter your Business Name:")

user_responses = {}

for category, details in questions_structure.items():
    st.header(category)
    scores = []
    for q in details['questions']:
        score = st.slider(q, 1, 5, 3, key=f"{category}_{q}")
        scores.append(score)
    user_responses[category] = scores

if st.button("Calculate Risk Score"):
    if not business_name:
        st.warning("Please enter your business name.")
    else:
        score, label, breakdown = compute_risk_score(user_responses, questions_structure)
        recs = generate_recommendations(breakdown)

        st.subheader(f"Overall Risk Score: {score} / 100")
        st.markdown(f"**Risk Category:** {label}")

        chart_df = pd.DataFrame({
            'Category': list(breakdown.keys()),
            'Score': list(breakdown.values())
        })

        bar_chart = alt.Chart(chart_df).mark_bar(color="#2E86C1").encode(
            x=alt.X('Category', sort=None),
            y='Score'
        ).properties(
            title='RiskLens SME Category Breakdown'
        )
        st.altair_chart(bar_chart, use_container_width=True)

        st.markdown("### Recommendations:")
        for r in recs:
            st.markdown(f"- {r}")

        pdf_file = f"{business_name.replace(' ', '_')}_RiskLens_Report.pdf"
        generate_pdf_with_reportlab(
            business_name=business_name,
            total_score=score,
            risk_label=label,
            category_scores=breakdown,
            recommendations=recs,
            output_path=pdf_file
        )

        with open(pdf_file, "rb") as f:
            st.download_button(
                label="ðŸ“„ Download My Risk Report (PDF)",
                data=f,
                file_name=pdf_file,
                mime="application/pdf"
            )

st.markdown("---")
st.markdown("<footer style='text-align: center; font-size: 0.8em;'>Powered by RiskLens SME</footer>", unsafe_allow_html=True)
